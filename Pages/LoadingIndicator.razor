@page "/loadingindicator"

<br />
<p>OnInitializedCounter: @OnInitializedCounter</p>
<p>OnInitializedAsyncCounter: @OnInitializedAsyncCounter</p>
<p>OnAfterRenderCounter: @(OnAfterRenderCounter + 1)</p>
<br />
@if (!Initialized)
{
    <p>Loading ...</p>
}
else
{
    <p>Ready.</p>
    <br />
    <p>Activity1 is an async method which awaits a two seconds delay task. It will result in two page renders!</p>
    <div>
        <button @onclick="ExecuteActivity1Async">Execute activity 1</button>&nbsp;<span>@Activity1Status</span>
    </div>
    <br />
    <p>Activity2 is a method which returns a completed task. It will result in one page render.</p>
    <div>
        <button @onclick="ExecuteActivity2">Execute activity 2</button>&nbsp;<span>@Activity2Status</span>
    </div>
    <br />
    <p>Activity3 is a method which returns a two seconds delay task. It will result in two page renders, the last one will occur once the task completes.</p>
    <div>
        <button @onclick="ExecuteActivity3">Execute activity 3</button>&nbsp;<span>@Activity3Status</span>
    </div>
    <br />
    <p>Activity4 is an async method which awaits two tasks of two seconds delay. It will result in 3 page renders because it is configured to update the screen after the first task is complete!</p>
    <div>
        <button @onclick="ExecuteActivity4Async">Execute activity 4</button>&nbsp;<span>@Activity4Status</span>
    </div>
    <br />
    <p>Activity5 is a sync method. It will result in one page render even if we try to update the screen during the execution.</p>
    <div>
        <button @onclick="ExecuteActivity5">Execute activity 5</button>&nbsp;<span>@Activity5Status</span>
    </div>
}

